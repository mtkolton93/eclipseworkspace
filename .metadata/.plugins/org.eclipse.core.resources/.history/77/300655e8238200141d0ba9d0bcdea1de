package shooter;

import java.awt.Graphics;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.ImageIcon;

@SuppressWarnings("unused")
public class Shot
{
	private int x = 0;
	private int y = 0;
	private int width = 5;
	private int speed = 0;
	private int type = 0;							//0=basic shot, 1=missile, 2=machine gun, 3=laser
	private int damage = 10;
	private boolean down;
	private boolean fired;
	private SpaceShooter shooter;
	private ImageIcon[] sprites = {
			new ImageIcon("images/shotsprite0.png"), 
			new ImageIcon("images/shotsprite1.png"),  
			new ImageIcon("images/shotsprite2.png"), 
			new ImageIcon("images/shotsprite3.png")};
	private ImageIcon[] spritesDown = {
			new ImageIcon("images/shotsprite0down.png"), 
			new ImageIcon("images/shotsprite1down.png"),  
			new ImageIcon("images/shotsprite2.png")};
	ImageIcon sprite;
	ArrayList<ShotListener> listeners = new ArrayList<ShotListener>();
	
	public Shot(SpaceShooter s, boolean d)
	{
		shooter = s;
		down = d;
		speed = 20;
		fired = false;
	}

	public void paint(Graphics g)
	{
		if(fired)
		{
			updatePosition();
			sprite.paintIcon(shooter, g, x-width/2, y);
			
			callListeners();
		}
	}
	
	public void setType(int t)
	{
		type = t;
		
		if(down)
		{
			sprite = spritesDown[type];
		}
		else
		{
			sprite = sprites[type];
		}
		
		//Basic shot
		if(type == 0)
		{
			width = 5;
			damage = 10;
		}
		//Missile
		if(type == 1)
		{
			width = 9;
			damage = 20;
		}
		//Machine Gun
		if(type == 2)
		{
			width = 15;
			damage = 5;
		}
		//Laser
		if(type == 3)
		{
			width = 15;
			damage = 15;
		}
		
		//Set the damage taken in each listener
		for(int i = 0; i < listeners.size(); i++)
		{
			listeners.get(i).setDamageTaken(damage);
		}
	}
	
	public int getType()
	{
		return type;
	}
	
	//Adds a listener for this shot
	public void addListener(ShotListener l)
	{
		listeners.add(l);
	}
	
	public void callListeners()
	{
		for(int i = 0; i < listeners.size(); i++)
		{
			if(listeners.get(i).shotMoved(x, y))
			{
				if(type != 3)
				{
					fired = false;
				}
			}
		}
	}
	
	//Fires from the shooter's position
	public void fire(int startX, int startY)
	{
		if(!fired)
		{
			x = startX;
			y = startY;
			fired = true;
		}
	}
	
	//Used for removing shots from player's shot list
	public boolean isFired()
	{
		return fired;
	}
	
	public void updatePosition()
	{
		if(down)
		{
			y = y + speed;
			if(y > 605)
			{
				fired = false;
			}
		}
		else
		{
			y = y - speed;
			if(y < -5)
			{
				fired = false;
			}
		}
	}
}